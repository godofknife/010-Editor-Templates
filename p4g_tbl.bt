//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//  Template for P4G tables that was built off of the P5 TBL template.  Credits to TGE, Lillian Goulston, and Scarltz for setting up the original template's structure and data.
//  Currently supports PERSONA.TBl, UNIT.TBL, and partially supports ENCOUNT.TBL
//------------------------------------------------

//---------------------------------------------
// Includes
//---------------------------------------------
#include "p4g_enums.bt"

//---------------------------------------------
// Type definition
//---------------------------------------------
typedef ubyte u8;
typedef short s16;
typedef ushort u16;
typedef ushort u16;
typedef uint u32;
typedef float f32;

enum<byte>bool
{
    False = 0,
    True = 1,
};

typedef struct
{
    u8 bit0 : 1;
    u8 bit1 : 1;
    u8 bit2 : 1;
    u8 bit3 : 1;
    u8 bit4 : 1;
    u8 bit5 : 1;
    u8 bit6 : 1;
    u8 bit7 : 1;
} b8;

typedef struct
{
    u8 bit0 : 1;
    u8 bit1 : 1;
    u8 bit2 : 1 <name = "Hidden Analysis?">;
    u8 bit3 : 1 <name = "Disable Knockdown?">;
    u8 bit4 : 1;
    u8 bit5 : 1;
    u8 bit6 : 1;
    u8 bit7 : 1;
    u8 bit8 : 1;
    u8 bit9 : 1;
    u8 bit10 : 1;
    u8 bit11 : 1;
    u8 bit12 : 1;
    u8 bit13 : 1;
    u8 bit14 : 1;
    u8 bit15 : 1;
} b16;

typedef struct
{
    u8 bit0 : 1;
    u8 bit1 : 1;
    u8 bit2 : 1;
    u8 bit3 : 1;
    u8 bit4 : 1;
    u8 bit5 : 1;
    u8 bit6 : 1;
    u8 bit7 : 1;
    u8 bit8 : 1;
    u8 bit9 : 1;
    u8 bit10 : 1;
    u8 bit11 : 1;
    u8 bit12 : 1;
    u8 bit13 : 1;
    u8 bit14 : 1;
    u8 bit15 : 1;
    u8 bit16 : 1;
    u8 bit17 : 1;
    u8 bit18 : 1;
    u8 bit19 : 1;
    u8 bit20 : 1;
    u8 bit21 : 1;
    u8 bit22 : 1;
    u8 bit23 : 1;
    u8 bit24 : 1;
    u8 bit25 : 1;
    u8 bit26 : 1;
    u8 bit27 : 1;
    u8 bit28 : 1;
    u8 bit29 : 1;
    u8 bit30 : 1;
    u8 bit31 : 1;
} b32;

typedef struct
{
    u8 bit0 : 1;
    u8 bit1 : 1;
    u8 bit2 : 1;
    u8 bit3 : 1;
    u8 bit4 : 1 <name = "Enemy Gets First Turn?">;
    u8 bit5 : 1 <name = "Use an Encounter Script?">;
    u8 bit6 : 1;
    u8 bit7 : 1;
    u8 bit8 : 1;
    u8 bit9 : 1;
    u8 bit10 : 1 <name = "No Navigator Voice?">;
    u8 bit11 : 1;
    u8 bit12 : 1;
    u8 bit13 : 1;
    u8 bit14 : 1;
    u8 bit15 : 1;
    u8 bit16 : 1;
    u8 bit17 : 1;
    u8 bit18 : 1;
    u8 bit19 : 1;
    u8 bit20 : 1;
    u8 bit21 : 1;
    u8 bit22 : 1;
    u8 bit23 : 1;
    u8 bit24 : 1;
    u8 bit25 : 1;
    u8 bit26 : 1;
    u8 bit27 : 1;
    u8 bit28 : 1;
    u8 bit29 : 1;
    u8 bit30 : 1;
    u8 bit31 : 1;
} Encounter_Flags;

//---------------------------------------------
// Helper functions
//---------------------------------------------
local uint __RandomSeed = 0xDEADBABE;
local uint __RandomBit = 0;
local uint __RandomCount = 0;
 
uint MyRandom( uint to )
{
    ++__RandomCount;
    __RandomBit  = ( (__RandomSeed >> 0 ) ^ ( __RandomSeed >> 2 ) ^ ( __RandomSeed >> 3 ) ^ ( __RandomSeed >> 5 ) ) & 1;
    __RandomSeed = ( ( ( ( __RandomBit << 15 ) | ( __RandomSeed >> 1 ) ) + ( 0xBABE / __RandomCount ) ) % to );

    while( __RandomSeed < 0 )
        __RandomSeed += to;

    return __RandomSeed;
}

void DetectEndianness()
{
    // Test endianness
    LittleEndian();
}

u32 Align( u32 value, u32 alignment )
{
	return (value + (alignment - 1)) & ~(alignment - 1);
}

void FAlign( u32 alignment )
{
	FSeek( Align( FTell(), alignment ) );
}

//---------------------------------------------
// Define structures
//---------------------------------------------

// Persona
typedef struct
{
    struct
        {
            bool Unknown : 1;
            bool SpecialFusion : 1;
            bool Unknown : 1;
            bool RESERVEPersona : 1;
            bool PartyPersona : 1;
            bool NotRegisterable : 1;
            bool UnlockOnMaxSLink : 1;
            bool Fusable : 1;
        } PersonaFlags <name = "Persona Flags">;
    byte : 1;
    ArcanaID Arcana <name = "Arcana">;
    u8 Level <name = "Level">;
    u8 Strength <name = "Strength">;
    u8 Magic <name = "Magic">;
    u8 Endurance <name = "Endurance">;
    u8 Agility <name = "Agility">;
    u8 Luck <name = "Luck">;
    u8 Unused;
    PersonaInherit Inheritance <name = "Inheritance">;
    u16 Unknown;
    u8 Unknown < name = "Unknown", comment = "Biggest number = Best Personas?" >;
} TPersonaStats <name = "Persona Stats">;

local u32 personaSkillSetIndex = 0;
typedef struct
{
    u8 Strength <name = "Strength">;
    u8 Magic <name = "Magic">;
    u8 Endurance <name = "Endurance">;
    u8 Agility <name = "Agility">;
    u8 Luck <name = "Luck">;
    u8 Unused <name = "Unused">;

    struct
    {        
        u8 PendingLevels <name = "Pending Levels">;
        SkillEnabled Enabled <name = "Enabled">; 
        BattleSkill Skill  <name = "Skill">;  
    } PersonaSkill[ 16 ] <name = "Persona Skills">;

} TPersonaSkillSet <name = "Persona Skillset">;

typedef struct
{
    PartyMember Member <name = "Member">;
	u8 Unknown;
    u8 LevelsAvailable <name = "Levels Available", comment = "Seems to be the number of level-ups available for stat gains, always set to 99">;
    u8 Unknown;

    struct
    {
        u8 Level <name = "Level">;
        SkillEnabled Enabled <name = "Enabled", comment = "If set to 0, the skill will not be learned, even if it is defined">;
        BattleSkill Skill <name = "Skill">;
    } PersonaSkill[ 32 ] <name = "Persona Skills">;

    struct
    {
        u8 Strength <name = "Strength">;
        u8 Magic <name = "Magic">;
        u8 Endurance <name = "Endurance">;
        u8 Agility <name = "Agility">;
        u8 Luck <name = "Luck">;
    } PersonaStatGain[ 98 ] <name = "Persona Stat Gain by Level">;

} TPersonaPartyMembers <name = "Party Members">;

typedef struct
{
    u32 Thresholds[ 98 ] <name = "EXP Threshold">;
} TPersonaLevelUpThresholds <name = "Party Member Level Up Thresholds", comment = "Total XP required to hit each level for each party member">;

typedef struct
{
    BattleSkill SkillOriginal <name = "Original Skill">;
	BattleSkill SkillMutation <name = "Mutation Skill">;
} TMagicianCard <name = "Magician Arcana Card Mutation">;

typedef struct
{
    PersonasID AsFusionTarget;
    PersonasID AsFusionMaterial;
} TPersonaFusion <name = "Persona Fusion">;

// Player

typedef struct
{
    u32 XPThreshold;
} TPlayer_LevelUpThresholds;

// Elsai
typedef struct
{
    u16 Unused;
    u16 AiId <name = "AI ID", comment = "All I know about this value is that if it's not 0, it causes the game to load an AI script for this enemy">; 
    u32 Unknown[ 10 ];
} TElsaiSegment1Entry;

typedef struct
{
    u8 Data[ 320 ];
} TElsaiSegment2Entry;

// AICalc tables
// Segment1 probably has bigger chunks than u32
typedef struct
{
    f32 Unknown;
} TAICalc_Segment1;

typedef struct
{
    f32 Unknown;
} TAICalc_Segment2;

typedef struct
{
    f32 Unknown;
} TAICalc_Segment3;

typedef struct
{
    f32 Unknown;
} TAICalc_Segment4;

typedef struct
{
    f32 Unknown;
} TAICalc_Segment5;

typedef struct
{
    u8 Unknown;
    u8 Unknown;
    u8 Unknown;
} TAICalc_Segment6;

typedef struct
{
    f32 Unknown;
} TAICalc_Segment7;

typedef struct
{
    f32 Unknown;
} TAICalc_Segment8;

typedef struct
{
	u8 Unknown0;
	u8 Unknown1;
	AIFunctions Unknown2 <name = "Which AI function to use">;
	u8 Unknown4;
	u8 Unknown5;
	u8 Unknown6;
	u8 Unknown7;
	u8 Unknown8;
	u8 Unknown9;
	u8 Unknown10;
	u8 Unknown11;
	u8 Unknown12;
	u8 Unknown13;
	u8 Unknown14;
	u8 Unknown15;
	u8 Unknown16;
	u8 Unknown17;
	u8 Unknown18;
	u8 Unknown19;
	u8 Unknown20;
	u8 Unknown21;
	u8 Unknown22;
	u8 Unknown23;
	u8 Unknown24;
	u8 Unknown25;
	u8 Unknown26;
	u8 Unknown27;
	u8 Unknown28;
	u8 Unknown29;
	u8 Unknown30;
	u8 Unknown31;
	u8 Unknown32;
	u8 Unknown33;
	u8 Unknown34;
	u8 Unknown35;
	u8 Unknown36;
	u8 Unknown37;
	u8 Unknown38;
	u8 Unknown39;
	u8 Unknown40;
	u8 Unknown41;
	u8 Unknown42;
	u8 Unknown43;
	u16 Unknown44 <name = "Chance to use skill">;
	BattleSkill Unknown46 <name = "Skill">;
	u8 Unknown47;
	u8 Unknown48;
	u16 Unknown49 <name = "Unknown Data">;
	u16 Unknown51 <name = "Chance to use skill">;
	BattleSkill Unknown53 <name = "Skill">;
	u8 Unknown55;
	u8 Unknown56;
	u16 Unknown57 <name = "Unknown Data">;
	u16 Unknown59 <name = "Chance to use skill">;
	BattleSkill Unknown61 <name = "Skill">;
	u8 Unknown63;
	u8 Unknown64;
	u8 Unknown65;
	u8 Unknown66;
	u16 Unknown67 <name = "Chance to use skill">;
	BattleSkill Unknown69 <name = "Skill">;
	u8 Unknown71;
	u8 Unknown72;
	u8 Unknown73;
	u8 Unknown74;
	u16 Unknown75 <name = "Chance to use skill">;
	BattleSkill Unknown77 <name = "Skill">;
	u8 Unknown79;
	u8 Unknown80;
	u8 Unknown81;
	u8 Unknown82;
	u16 Unknown83 <name = "Chance to use skill">;
	BattleSkill Unknown85 <name = "Skill">;
	u8 Unknown87;
	u8 Unknown88;
	u16 Unknown89 <name = "Unknown Data">;
	u16 Unknown91 <name = "Chance to use skill">;
	BattleSkill Unknown93 <name = "Skill">;
	u8 Unknown95;
	u8 Unknown96;
	u16 Unknown97 <name = "Unknown Data">;
	u16 Unknown99 <name = "Chance to use skill">;
	BattleSkill Unknown101 <name = "Skill">;
	u8 Unknown103;
	u8 Unknown104;
	u8 Unknown105;
	u8 Unknown106;
	u16 Unknown107 <name = "Chance to use skill">;
	BattleSkill Unknown109 <name = "Skill">;
	u8 Unknown111;
	u8 Unknown112;
	u8 Unknown113;
	u8 Unknown114;
	u8 Unknown115;
	u8 Unknown116;
	u8 Unknown117;
	u8 Unknown118;
	u8 Unknown119;
	u8 Unknown120;
	u8 Unknown121;
	u8 Unknown122;
	u16 Unknown123 <name = "Chance to use skill">;
	BattleSkill Unknown126 <name = "Skill">;
	u8 Unknown127;
	u8 Unknown128;
	u16 Unknown129 <name = "Unknown Data">;
	u16 Unknown131 <name = "Chance to use skill">;
	BattleSkill Unknown133 <name = "Skill">;
	u8 Unknown135;
	u8 Unknown136;
	u16 Unknown137 <name = "Unknown Data">;
	u16 Unknown139 <name = "Chance to use skill">;
	BattleSkill Unknown141 <name = "Skill">;
	u8 Unknown143;
	u8 Unknown144;
	u8 Unknown145;
	u8 Unknown146;
	u8 Unknown147;
	u8 Unknown148;
	u8 Unknown149;
	u8 Unknown150;
	u8 Unknown151;
	u8 Unknown152;
	u8 Unknown153;
	u8 Unknown154;
	u8 Unknown155;
	u8 Unknown156;
	u8 Unknown157;
	u8 Unknown158;
	u8 Unknown159;
	u8 Unknown160;
	u8 Unknown161;
	u8 Unknown162;
} TAICalc_Generic_Enemy_AI;

// Encounter
typedef struct
{
    Encounter_Flags Flags <name = "Flags">;
    u16 Field04;
    u16 Field06;
    BattleUnit Units[ 5 ] <name = "Battle Units">;
    u16 FieldId <name = "Field ID">;
    u16 RoomId <name = "Room ID">;
    MusicID MusicId <name = "Music">;
} TEncounter <name = "Enemy Encounters">;

typedef struct
{
    ushort FloorEncountersLookup;   // Encounters that can be spawned on floor
    byte MinEncounterCount;         // Spawns more enemies if the count is below this value
    byte InitialEncounterCount;     // How many enemies spawn on initial floor gen
    byte MaxChestCount;             // Number of chests on floor gen
    byte Unused;
    uint LootLookup;                // What the contents of chests can be
    /*
        Need to pick a loot table that has a number of entries
        >= MaxChestCount
    */
}TEncounterSegment1 <name = "Floor Spawn Data">;

typedef struct
{
	ushort index_like<name="Encounter ID">;
	ushort encount_id<name="Encounter Weight">;
}EntryTable;

typedef struct
{
    ubyte MaxDistributionRegular<name="Max Distribution %  (Normal Encounter) [Regular]">;
    ubyte MaxDistributionRain<name="Max Distribution %  (Normal Encounter) [Rain]">;
    ubyte RESERVEENC<name="Always FF">;
    // Rare encounters are entries 20-24 [inclusive]
    ubyte MaxDistributionRARERegular<name="Max Distribution % (Rare Encounter) [Regular]">;
    ubyte MaxDistributionRARERain<name="Max Distribution % (Rare Encounter) [Rain]">;
    ubyte ChanceReplace<name="Chance of replacing regular encounter">;

    /*
        Both the weight of rare encounters and the chance for replacing
        regular encounters MUST GO UP in order for the effects to be noticed

        If my observations are correct, max distribution accounts for the
        HYPOTHETICAL maximum amount of an encounter type that saturates the floor,
        while the chance of replacement is the chance for any individual encounter
        to be of a given type

        Since regular encounters are the default, they don't need to potentially
        replace another encounter, hence why their third value is FF and also unused
    */

    // Gold hand encounters are entries 25-29 [inclusive]
    ubyte MaxDistributionGOLDRegular<name="Max Distribution %  (Gold Hand)  [Regular]">;
    ubyte MaxDistributionGOLDRain<name="Max Distribution %  (Gold Hand) [Rain]">;
    ubyte ChanceReplace1<name="Chance of replacing regular encounter">;
    ubyte RESERVEENC1<name="unused">;
    ubyte RESERVEENC2<name="unused">;
    ubyte RESERVEENC3<name="unused">;
	
	
	
    EntryTable upper_table[30]<name="Regular Encounters">;
    EntryTable lower_table[30]<name="Rainy Encounters">;
} TEncounterSegment3 <name = "Floor Encount Table">;

typedef struct TLootEntry
{
    // Don't entirely get the minutia, but as I understand, bigger
    // numbies are more likely to get picked as possible items
    ushort weight<name="Weight">;
    // Having multiple items of the same ID in seperate entries
    // makes the game more unstable. If all entries reference the same
    // item, game crashes upon loading dungeon. Best to limit to one entry
    // per unique item
    ushort id<name="Item ID">;          
    // if value is 1, the chest is locked
    // otherwise no lock is applied
    ushort u3<name="Lock Value">;
    // Needs to be set to 1 to be recognized as a valid loot possibility
    ubyte valid<name="Valid Flag">;
    // 0 for standard red chest
    // 1 for big shiny gold chest
    ubyte chestType<name="Chest Type">;
    uint unused;
};

typedef struct
{
    TLootEntry data[29];
} TEncounterSegment4 <name = "Chest Loot Table">;

// Unit table
typedef struct
{
    b16 Flags <name = "Flags">;
    ArcanaID Arcana <name = "Arcana">;
    u8 Level <name = "Level">;
    u16 Hp <name = "HP">;
    u16 Sp <name = "SP">;
    u8 Strength <name = "Strength">;
    u8 Magic <name = "Magic">;
    u8 Endurance <name = "Endurance">;
    u8 Agility <name = "Agility">;
    u8 Luck <name = "Luck">;
	u8 Unknown6;
    BattleSkill SkillIds[ 8 ] <name = "Battle Skills">;
    u16 ExpReward <name = "EXP Reward">;
    u16 MoneyReward <name = "Money Reward">;
    Items Item1 <name = "Item 1 Drop">;
	u16 DropChance <name = "Drop Chance">;
	Items Item2 <name = "Item 2 Drop">;
	u16 DropChance2 <name = "Drop Chance">;
	Items Item3 <name = "Item 3 Drop">;
	u16 DropChance3 <name = "Drop Chance">;
	Items Item4 <name = "Item 4 Drop">;
	u16 DropChance4 <name = "Drop Chance">;
	u16 Unknown13;
	u16 Unknown14;
	u16 Unknown15;
	u8 ElementAttack <name = "Element Basic Attack">;
    u8 AccuracyAttack <name = "Accuracy Basic Attack">;
	u16 AttackPower <name = "Attack Power">;
} TEnemyUnitStats <name = "Enemy Unit Stats">;

typedef struct
{
	u8 Multiplier <name = "Multiplier (in increments of 5%)", comment = "Multiplies damage & ailment chance. 20 is Neutral since 20 x 5% = 100% of normal dmg & ail. chance. 80 x 5% = 400% = 4x multiplier. 0 is ignored (does not nullify attack).">;
    u8 Block : 1;
    u8 Repel : 1;
    u8 Drain : 1;
    u8 Weak : 1 <comment = "Damage x 1.25 (by default) and knockdown. (However, if Multiplier field is specified (non-zero), it replaces the default 1.25x mutliplier.)">;
    u8 Resist : 1 <comment = "Displays Resist text and halves damage (by default) when hit. (However, If Mutliplier field is specified (non-zero), it replaces the default 0.5x multiplier.)">;
	u8 Ailment_Immune : 1<name = "Ailment Immune", comment = "Incoming attacks never inflict ailments (including insta-kill). Overrides Guarantee Ailment. Does NOT prevent Critical hits.">;
    u8 Guarantee_Ailment : 1<name = "Guarantee Ailment", comment = "Incoming attacks with an ailment chance always inflict the ailment.">;
    u8 Double_Ailment_Chance : 1<name = "Double Ailment Chance", comment = "Used on Fire/Ice/Elec affinity to double the chance that an incoming attack inflicts the corresponding ailment (Burn/Freeze/Shock).">;
} AffinityBitfield <name = "Affinity Status">;

typedef struct
{
    AffinityBitfield PhysAffinity <name = "Physical">;
    AffinityBitfield FireAffinity <name = "Fire">;
    AffinityBitfield IceAffinity <name = "Ice">;
    AffinityBitfield ElecAffinity <name = "Electric">;
    AffinityBitfield WindAffinity <name = "Wind">;
	AffinityBitfield AlmightyAffinity <name = "Almighty">;
    AffinityBitfield LightAffinity <name = "Light">;
    AffinityBitfield DarkAffinity <name = "Dark">;
    AffinityBitfield PanicAffinity <name = "Panic">;
    AffinityBitfield PoisonAffinity <name = "Poison">;
    AffinityBitfield FearAffinity <name = "Fear">;
    AffinityBitfield RageAffinity <name = "Rage">;
    AffinityBitfield DizzyAffinity <name = "Dizzy">;
    AffinityBitfield ExhaustionAffinity <name = "Exhaustion">;
    AffinityBitfield EnervationAffinity <name = "Enervation">;
    AffinityBitfield SilenceAffinity <name = "Silence">;
} TUnitPersonaElementalAffinities <name = "Persona Elemental Affinities">;

typedef struct
{
    AffinityBitfield PhysAffinity <name = "Physical">;
    AffinityBitfield FireAffinity <name = "Fire">;
    AffinityBitfield IceAffinity <name = "Ice">;
    AffinityBitfield ElecAffinity <name = "Electric">;
    AffinityBitfield WindAffinity <name = "Wind">;
	AffinityBitfield AlmightyAffinity <name = "Almighty">;
    AffinityBitfield LightAffinity <name = "Light">;
    AffinityBitfield DarkAffinity <name = "Dark">;
    AffinityBitfield PanicAffinity <name = "Panic">;
    AffinityBitfield PoisonAffinity <name = "Poison">;
    AffinityBitfield FearAffinity <name = "Fear">;
    AffinityBitfield RageAffinity <name = "Rage">;
    AffinityBitfield DizzyAffinity <name = "Dizzy">;
    AffinityBitfield ExhaustionAffinity <name = "Exhaustion">;
    AffinityBitfield EnervationAffinity <name = "Enervation">;
    AffinityBitfield SilenceAffinity <name = "Silence">;
} TUnitEnemyElementalAffinities <name = "Enemy Unit Elemental Affinities">;

/* // Still testing whether the last 8 are what I think they are
typedef struct
{
    AffinityStatus PhysAffinity <name = "Physical">;
    AffinityStatus FireAffinity <name = "Fire">;
    AffinityStatus IceAffinity <name = "Ice">;
    AffinityStatus ElecAffinity <name = "Electric">;
    AffinityStatus WindAffinity <name = "Wind">;
	AffinityStatus AlmightyAffinity <name = "Almighty">;
    AffinityStatus LightAffinity <name = "Light">;
    AffinityStatus DarkAffinity <name = "Dark">;
    AffinityStatus PanicAffinity <name = "Panic">;
    AffinityStatus PoisonAffinity <name = "Poison">;
    AffinityStatus FearAffinity <name = "Fear">;
    AffinityStatus RageAffinity <name = "Rage">;
    AffinityStatus DizzyAffinity <name = "Dizzy">;
    AffinityStatus ExhaustionAffinity <name = "Exhaustion">;
    AffinityStatus EnervationAffinity <name = "Enervation">;
    AffinityStatus SilenceAffinity <name = "Silence">;
} TUnitPersonaElementalAffinities <name = "Persona Elemental Affinities">;

typedef struct
{
    AffinityStatus PhysAffinity <name = "Physical">;
    AffinityStatus FireAffinity <name = "Fire">;
    AffinityStatus IceAffinity <name = "Ice">;
    AffinityStatus ElecAffinity <name = "Electric">;
    AffinityStatus WindAffinity <name = "Wind">;
	AffinityStatus AlmightyAffinity <name = "Almighty">;
    AffinityStatus LightAffinity <name = "Light">;
    AffinityStatus DarkAffinity <name = "Dark">;
    AffinityStatus PanicAffinity <name = "Panic">;
    AffinityStatus PoisonAffinity <name = "Poison">;
    AffinityStatus FearAffinity <name = "Fear">;
    AffinityStatus RageAffinity <name = "Rage">;
    AffinityStatus DizzyAffinity <name = "Dizzy">;
    AffinityStatus ExhaustionAffinity <name = "Exhaustion">;
    AffinityStatus EnervationAffinity <name = "Enervation">;
    AffinityStatus SilenceAffinity <name = "Silence">;
} TUnitEnemyElementalAffinities <name = "Enemy Unit Elemental Affinities">; */

typedef struct
{
    u8 Values[ 24 ];
} TUnitSegment3Entry;

typedef struct
{
    u16 ShadowIndex <name = "Shadow Index">;
    u16 ModelIndex <name = "Model Index">;
} TUnitVisualIndex <name = "Visual Index">;


// Skill
typedef struct
{
    ElementalType Element <name = "Elemental Type">;
    Skill_SkillType SkillType <name = "Skill Type", comment = "Must be set correctly for the element icon to appear properly, even though it's otherwise redundant">;
} TSkill_Elements <name = "Skill Elements">;

typedef struct
{
    Skill_CasterEffect1 CasterEffect1 <name = "Caster Effect", comment = "Needs more testing">;
    Skill_CasterEffect2 CasterEffect2 <name = "Caster Effect", comment = "Needs more testing">;
    u16 Unknown <name = "Unknown">;

    struct
        {
            bool Field : 1 <name = "Usable in Field">;
            bool Battle : 1 <name = "Usable in Battle">;
            byte : 6;
        } Skill_Area <name = "Skill Area Type">;

    Skill_DamageStat DamageStat <name = "Damage Stat", comment = "Determines which stat is used to determine damage">;
    Skill_CostType CostType <name = "Cost Type">;
    u8 Unknown <name = "Unknown">;
    u16 SkillCost <name = "Skill Cost", comment = "% of max HP or fixed amount of SP">;
    Skill_PhysicalOrMagicSkill PhysicalOrMagic <name = "Physical or Magic?", comment = "determines what's affected by either Charge or Concentrate, but doesn't seem to change what's reflected by Tetrakarn or Makarakarn. Needs more testing">;
    u8 Unknown; //Skill_TargetRestrictions TargetRestrictions <name = "Additional Target Restrictions">;
    Skill_NumberOfTargets NumberOfTargets <name = "Number of Targets">;

    struct
        {
            bool Allies : 1 <name = "Allies">;
            bool Enemies : 1 <name = "Enemies">;
            byte : 6;
        } ValidTargets <name = "Valid Targets">;

    u8 Unknown <name = "Unknown">;
    u8 Unknown <name = "Unknown">;
    u8 Unknown <name = "Unknown">;
    u8 Unknown <name = "Unknown">;
    u8 Accuracy <name = "Accuracy">;
    u8 MinHits <name = "Minimum Number of Hits">;
    u8 MaxHits <name = "Maximum Number of Hits">;
    Skill_HPEffect HPEffect <name = "Damage/Healing Type">;
    u16 BaseDamage <name = "Base Damage">;
    Skill_SPEffect SPEffect <name = "Deplete or Restore SP?">;
    u8 Unknown <name = "Unknown">;
    u8 SPAmount <name = "SP Amount">;
    u8 Unknown <name = "Unknown">;
    Skill_ApplyOrCureEffect ApplyOrCureEffect <name = "Apply or Cure Effect?">;
    u8 SecondaryEffectChance <name = "Effect Chance">;
    u8 Unknown <name = "Unknown">;
    u8 Unknown <name = "Unknown">;

   struct
        {
            bool Dizzy : 1 <name = "Dizzy">;
            bool Rage : 1 <name = "Rage">;
            bool Fear : 1 <name = "Fear">;
            bool Silence : 1 <name = "Silence">;
            bool Panic : 1 <name = "Panic">;
            bool Poison : 1 <name = "Poison">;
            bool Exhaustion : 1 <name = "Exhaustion">;
            bool Enervation : 1 <name = "Enervation">;
        } Effect2 <name = "Ailments">;

    u8 Unknown <name = "Unknown">;

   struct
        {
            bool Unconscious : 1 <name = "Unconscious">;
            bool KnockDown : 1 <name = "Knock Down">;
        } Effect4 <name = "Member Status">;

    u8 Unknown <name = "Unknown">;

    struct
        {
            bool AttackUp1 : 1 <name = "Attack Up 1">;
            bool AttackDown1 : 1 <name = "Attack Down 1">;
            bool AttackUp2 : 1 <name = "Attack Up 2">;
            bool AttackDown2 : 1 <name = "Attack Down 2">;
            bool HitEvasionUp : 1 <name = "Hit/Evasion Up">;
            bool HitEvasionDown : 1 <name = "Hit/Evasion Down">;
            bool DefenseUp : 1 <name = "Defense Up">;
            bool DefenseDown : 1 <name = "Defense Down">;
        } BuffDebuff1 <name = "Buffs and Debuffs 1">;

   struct
        {
            bool RemoveDebuffs : 1 <name = "Remove Debuffs", comment = "Removes stat-lowering debuffs">;
            bool RemoveBuffs : 1 <name = "Remove Buffs", comment = "Removes stat-raising buffs">;
            bool PowerCharge : 1 <name = "Power Charge", comment = "Next Strength-based attack deals 2.5x damage">;
            bool MindCharge : 1 <name = "Mind Charge", comment = "Next Magic-based attack deals 2.5x damage">;
            bool MagicShield : 1 <name = "Magic Shield", comment = "Reflects the next magic attack received">;
            bool PhysicalShield : 1 <name = "Physical Shield", comment = "Reflects the next physical attack received">;
            bool CritUp : 1 <name = "Critical Chance Up">;
            bool CritWayUp : 1 <name = "Critical Chance Way Up">;
        } BuffDebuff2 <name = "Buffs and Debuffs 2">;

   struct
        {
            bool PhysicalShield : 1 <name = "Physical Shield", comment = "Reflects the next physical attack received">;
            bool MagicShield : 1 <name = "Magic Shield", comment = "Reflects the next magic attack received">;
            bool NegateFireResist : 1 <name = "Negate Fire Resistance", comment = "Changes innate Fire resistance to neutral; does not override Cover Weakness effects">;
            bool NegateIceResist : 1 <name = "Negate Ice Resistance", comment = "Changes innate Ice resistance to neutral; does not override Cover Weakness effects">;
            bool NegateWindResist : 1 <name = "Negate Wind Resistance", comment = "Changes innate Wind resistance to neutral; does not override Cover Weakness effects">;
            bool NegateElecResist : 1 <name = "Negate Electric Resistance", comment = "Changes innate Electric resistance to neutral; does not override Cover Weakness effects">;
            bool AilmentSusceptibility : 1 <name = "Ailment Susceptibility", comment = "increases the likelihood of receiving ailments">;
            bool AttackCantConnect : 1 <name = "Attack Can't Connect", comment = "Every attack from the opposite side will miss">;
        } ElementResistance1 <name = "Element Resistance 1">;

   struct
        {
            bool BreakPhysicalShield : 1 <name = "Break Physical Shield", comment = "Breaks physical-reflecting shields like Tetrakarn">;
            bool BreakMagicShield : 1 <name = "Break Magic Shield", comment = "Breaks magic-reflecting shields like Makarakarn">;
            bool InstakillShield : 1 <name = "Instakill Shield", comment = "Blocks one instakill attack">;
            bool CoverFire : 1 <name = "Cover Fire Weakness", comment = "Changes innate Fire weakness to neutral">;
            bool CoverIce : 1 <name = "Cover Ice Weakness", comment = "Changes innate Ice weakness to neutral">;
            bool CoverElec : 1 <name = "Cover Electric Weakness", comment = "Changes innate Electric weakness to neutral">;
            bool CoverWind : 1 <name = "Cover Wind Weakness", comment = "Changes innate Wind weakness to neutral">;
        } ElementResistance2 <name = "Element Resistance 2">;

    Skill_ExtraEffect ExtraEffect <name = "Extra Effects">;
    u8 CritChance <name = "Crit Chance", comment = "Only works for Physical skills">;
    u8 SpecialEffectChance <name = "Special Effect Chance">;
    u8 Unknown <name = "Unknown">;
} TSkill_ActiveSkillData <name="Active Skill Data: ">;

// Item

typedef struct
{
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    GearEquippable User <name = "Equippable User(s)">;
    u16 Unknown;
    u8 Strength <name = "Strength Boost">;
    u8 Magic <name = "Magic Boost">;
    u8 Endurance <name = "Endurance Boost">;
    u8 Agility <name = "Agility Boost">;
    u8 Luck <name = "Luck Boost">;
    u8 Unknown;
    GearEffect Effect <name = "Effect">;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 PurchasePrice <name = "Purchase Price">;
    u16 Unknown;
    u16 SellPrice <name = "Sell Price">;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
} TItem_Accessories <name ="Accessories">;


typedef struct
{
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    GearEquippable User <name = "Equippable User(s)">;
    u16 Unknown;
    u16 ArmorDefense <name = "Defense">;
    u16 ArmorEvasion <name = "Evasion">;
    u8 ArmorStrength <name = "Strength Boost">;
    u8 ArmorMagic <name = "Magic Boost">;
    u8 ArmorEndurance <name = "Endurance Boost">;
    u8 ArmorAgility <name = "Agility Boost">;
    u8 ArmorLuck <name = "Luck Boost">;
    u8 Unknown;
    GearEffect Effect <name = "Effect">;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 PurchasePrice <name = "Purchase Price">;
    u16 Unknown;
    u16 SellPrice <name = "Sell Price">;
    u16 Unknown;
    u16 Unknown;
} TItem_Armor <name ="Armor">;

typedef struct
{
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    BattleSkill Skill;
    u16 Unknown;
    u16 Unknown;
    u16 PurchasePrice <name = "Purchase Price">;
    u16 Unknown;
    u16 SellPrice <name = "Sell Price">;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
} TItem_Consumables <name ="Consumables">;

typedef struct
{
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown; 
    u16 Unknown; 
    u16 Unknown; 
} TItem_KeyItems <name ="Key Items">;

typedef struct
{
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 PurchasePrice <name = "Purchase Price">;
    u16 Unknown;
    u16 SellPrice <name = "Sell Price">;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
} TItem_Materials <name ="Materials">;

typedef struct
{
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    GearEquippable User <name = "Equippable User(s)">;
    u16 Unknown;
    u16 Unknown;
    u16 Attack <name = "Attack">;
    u16 Accuracy <name = "Accuracy">;
    u8 Strength <name = "Strength Boost">;
    u8 Magic <name = "Magic Boost">;
    u8 Endurance <name = "Endurance Boost">;
    u8 Agility <name = "Agility Boost">;
    u8 Luck <name = "Luck Boost">;
    u8 Unknown;
    GearEffect Effect <name = "Effect">;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 PurchasePrice <name = "Purchase Price">;
    u16 Unknown;
    u16 SellPrice <name = "Sell Price">;
    u16 Unknown;
    u16 Unknown;
} TItem_MeleeWeapons <name ="Melee Weapons">;

typedef struct
{
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    GearEquippable User <name = "Equippable User(s)">;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
} TItem_Outfits <name ="Outfits">;

typedef struct
{
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    BattleSkill Skill;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
} TItem_SkillCards <name ="Skill Cards">;

typedef struct
{
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    GearEquippable User <name = "Equippable User(s)">;
    u16 Unknown;
    u16 Unknown;
    u16 Attack <name = "Attack">;
    u16 Accuracy <name = "Accuracy">;
    u16 Rounds <name = "Rounds">;
    u8 Strength <name = "Strength Boost">;
    u8 Magic <name = "Magic Boost">;
    u8 Endurance <name = "Endurance Boost">;
    u8 Agility <name = "Agility Boost">;
    u8 Luck <name = "Luck Boost">;
    u8 Unknown;
    GearEffect Effect <name = "Effect">;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 Unknown;
    u16 PurchasePrice <name = "Purchase Price">;
    u16 Unknown;
    u16 SellPrice <name = "Sell Price">;
    u16 Unknown;
    u16 Unknown;
} TItem_RangedWeapons <name ="Ranged Weapons">;

typedef struct
{
	s16 Hitreg <name = "Effect Frame", comment = "The frame where damage is dealt, the frame where the card break effect plays, the frame where the item use effect plays, etc.">;
	s16 Animation_speed <name = "Animation Speed">;
	s16 Airtime <name = "Time in the air">;
	s16 Animation_Distance <name = "Animation Distance from Enemy">;
	s16 Unknown2;
} TVisual_Animation_Data <name = "Animation Data">;

typedef struct
{
    s16 Field000;
	s16 CamDistance <name = "Camera + Effects Target Distance">;
	s16 Distance1 <name = "Model Distance Outside of Menu", comment = "Does not actually change where the model is, but does effect where the game THINKS it is.">;
	s16 Attack_Cam <name = "Attack Camera Distance">;
	s16 Distance2 <name = "Model Distance while in Menu", comment = "Also controls certain camera angles">;
	s16 Field005;
	s16 Field006;
	s16 Down_Distance <name = "Distance Moved when down", comment = "Does not actually change where the model is, but does effect where the game THINKS it is.  Only lasts for the first turn after unit is downed.">;
	s16 Down_Cam1 <name = "Downed Camera Target Distance">;
	s16 Down_Cam2 <name = "Downed Camera Distance">;
	s16 Model_Size <name = "Model Scale">;
	s16 Field011;
	s16 Field012;
	s16 Field013;
	s16 Field014;
	s16 Field015;
	s16 Field016;
	s16 Field017;
	s16 Field018;
	s16 Field019;
	s16 Field020;
	s16 Field021;
	s16 Field022;
	s16 Field023;
	s16 Field024;
	s16 Field025;
	s16 Field026;
	s16 Field027;
	s16 Field028;
	s16 Field029;
	TVisual_Animation_Data Anim_Data [32];
	s16 Field190;
	// TVisual_AttackFrameData FrameData;
} TVisual_EnemyVisualVariablesA <name = "Player Visual Variables">;
    
typedef struct
{
    s16 Field000;
	s16 CamDistance <name = "Camera + Effects Target Distance">;
	s16 Distance1 <name = "Model Distance Outside of Menu", comment = "Does not actually change where the model is, but does effect where the game THINKS it is.">;
	s16 Attack_Cam <name = "Attack Camera Distance">;
	s16 Distance2 <name = "Model Distance while in Menu", comment = "Also controls certain camera angles">;
	s16 Field005;
	s16 Field006;
	s16 Down_Distance <name = "Distance Moved when down", comment = "Does not actually change where the model is, but does effect where the game THINKS it is.  Only lasts for the first turn after unit is downed.">;
	s16 Down_Cam1 <name = "Downed Camera Target Distance">;
	s16 Down_Cam2 <name = "Downed Camera Distance">;
	s16 Model_Size <name = "Model Scale">;
	s16 Field011;
	s16 Deathflag <name = "Death Flag">;
	s16 Hitnum <name = "Number of hits in normal Phys attack">;
	s16 Field014;
	s16 Field015;
	s16 Field016;
	s16 Field017;
	s16 Field018;
	s16 Field019;
	s16 Field020;
	TVisual_Animation_Data Anim_Data [19];
    // TVisual_AttackFrameData FrameData;
	// byte Unknown2 [ 0x30 ];
} TVisual_PlayerVisualVariablesA <name = "Enemy Visual Variables">;

typedef struct
{
    s16 Field000;
	s16 Field001;
	s16 Field002;
	s16 Field003;
	s16 Field004;
	s16 Field005;
	s16 Field006;
	s16 Field007;
	s16 PhysLocation <name = "Model location for Physical Animation">;
	s16 Field009;
	s16 Field010;
	s16 MagLocation <name = "Model location for Magic Animation">;
	s16 Model_Size <name = "Model Scale">;
	TVisual_Animation_Data Anim_Data [6];
	s16 Field043 <name = "Model Alpha">;
} TVisual_PersonaVisualVariablesA <name = "Persona Visual Variables">;

// MSG.TBL

typedef struct {
    char ArcanaName[21] <name = "Arcana Name">;
} TMSG_ArcanaNames <name = "Arcana Names">;

typedef struct {
    char SkillName[23] <name = "Skill Name">;
} TMSG_SkillNames <name = "Skill Names">;

typedef struct {
    char EnemyName[21] <name = "Enemy Name">;
} TMSG_EnemyNames <name = "Enemy Names">;

typedef struct {
    char PersonaName[21] <name = "Persona Name">;
} TMSG_PersonaNames <name = "Persona Names">;

typedef struct
{
    u8 Unknown; 
} TItem_Footer <name ="Footer">;


//---------------------------------------------
// Parse file structure
//---------------------------------------------
enum TableSegmentType
{
    TableSegmentType_Unknown,
    TableSegmentType_Persona_Stats,
    TableSegmentType_Persona_SkillSets,
	TableSegmentType_Persona_PartyMembers,
    TableSegmentType_Persona_LevelUpThresholds,
	TableSegmentType_Persona_MagicianCard,
    TableSegmentType_Persona_Fusion,
    TableSegmentType_Player_LevelUpThresholds,
    TableSegmentType_Elsai_Segment0,
    TableSegmentType_Elsai_Segment1,
    TableSegmentType_AICalc_Segment1,
    TableSegmentType_AICalc_Segment2,
    TableSegmentType_AICalc_Segment3,
    TableSegmentType_AICalc_Segment4,
    TableSegmentType_AICalc_Segment5,
    TableSegmentType_AICalc_Segment6,
    TableSegmentType_AICalc_Segment7,
	TableSegmentType_AICalc_Segment8,
	TableSegmentType_AICalc_Generic_Enemy_AI,
	TableSegmentType_AICalc_Player_AI,
	TableSegmentType_AICalc_Enemy_AI,
    TableSegmentType_Encounter,
	TableSegmentType_EncounterSegment1,
	TableSegmentType_EncounterSegment2,
	TableSegmentType_EncounterSegment3,
	TableSegmentType_EncounterSegment4,
    TableSegmentType_Skill_Elements,
    TableSegmentType_Skill_ActiveSkillData,
    TableSegmentType_Item_Accessories,
    TableSegmentType_Item_Armor,
    TableSegmentType_Item_Consumables,
    TableSegmentType_Item_KeyItems,
    TableSegmentType_Item_Materials,
    TableSegmentType_Item_MeleeWeapons,
    TableSegmentType_Item_Outfits,
    TableSegmentType_Item_SkillCards,
    TableSegmentType_Item_RangedWeapons,
    TableSegmentType_Item_Footer,
    TableSegmentType_Unit_EnemyUnitStats,
    TableSegmentType_Unit_EnemyElementalAffinities,
    TableSegmentType_Unit_PersonaElementalAffinities,
    TableSegmentType_Unit_Segment3,
    TableSegmentType_Unit_VisualIndex,
	TableSegmentType_Visual_EnemyVisualVariables,
    TableSegmentType_Visual_PlayerVisualVariables,
    TableSegmentType_Visual_PersonaVisualVariables,
	TableSegmentType_MSG_ArcanaNames,
    TableSegmentType_MSG_SkillNames,
    TableSegmentType_MSG_EnemyNames,
    TableSegmentType_MSG_PersonaNames,
};

typedef struct( TableSegmentType _type )
{
    LittleEndian();
	uint Size;
    local TableSegmentType type = _type; // for debugging

    switch ( type )
    {
        case TableSegmentType_Persona_Stats:
            TPersonaStats Stats[ Size / sizeof( TPersonaStats ) ];
            break;

        case TableSegmentType_Persona_SkillSets:
            TPersonaSkillSet SkillSets[ Size / sizeof( TPersonaSkillSet ) ];
            break;

        case TableSegmentType_Persona_PartyMembers:
            TPersonaPartyMembers PartyMembers[ Size / sizeof( TPersonaPartyMembers ) ];
            break;
		
		case TableSegmentType_Persona_LevelUpThresholds:
            TPersonaLevelUpThresholds LevelUpThresholds[ Size / sizeof( TPersonaLevelUpThresholds ) ];
            break;
			
		case TableSegmentType_Persona_MagicianCard:
            TMagicianCard MagicianArcanaCard[ Size / sizeof( TMagicianCard ) ];
            break;

        case TableSegmentType_Persona_Fusion:
            TPersonaFusion PersonaFusion[ Size / sizeof( TPersonaFusion ) ];
            break;

        case TableSegmentType_Player_LevelUpThresholds:
            TPlayer_LevelUpThresholds LevelUpThresholds[ Size / sizeof( TPlayer_LevelUpThresholds ) ];
            break;

        case TableSegmentType_Elsai_Segment0:
            TElsaiSegment1Entry Entries[ Size / sizeof( TElsaiSegment1Entry ) ];
            break;

        case TableSegmentType_Elsai_Segment1:
            TElsaiSegment2Entry Entries[ Size / sizeof( TElsaiSegment2Entry ) ];
            break;

        case TableSegmentType_AICalc_Segment1:
            TAICalc_Segment1 Entries[ Size / sizeof( TAICalc_Segment1 ) ];
            break;

        case TableSegmentType_AICalc_Segment2:
            TAICalc_Segment2 Entries[ Size / sizeof( TAICalc_Segment2 ) ];
            break;

        case TableSegmentType_AICalc_Segment3:
            TAICalc_Segment3 Entries[ Size / sizeof( TAICalc_Segment3 ) ];
            break;

        case TableSegmentType_AICalc_Segment4:
            TAICalc_Segment4 Entries[ Size / sizeof( TAICalc_Segment4 ) ];
            break;

        case TableSegmentType_AICalc_Segment5:
            TAICalc_Segment5 Entries[ Size / sizeof( TAICalc_Segment5 ) ];
            break;

        case TableSegmentType_AICalc_Segment6:
            TAICalc_Segment6 Entries[ Size / sizeof( TAICalc_Segment6 ) ];
            break;

        case TableSegmentType_AICalc_Segment7:
            TAICalc_Segment7 Entries[ Size / sizeof( TAICalc_Segment7 ) ];
            break;
			
		case TableSegmentType_AICalc_Segment8:
            TAICalc_Segment8 Entries[ Size / sizeof( TAICalc_Segment8 ) ];
            break;
			
		case TableSegmentType_AICalc_Generic_Enemy_AI:
            TAICalc_Generic_Enemy_AI Entries[ Size / sizeof( TAICalc_Generic_Enemy_AI ) ];
            break;
			
		case TableSegmentType_AICalc_Player_AI:
            byte Data[ Size ];
            break;
		
		case TableSegmentType_AICalc_Enemy_AI:
            byte Data[ Size ];
            break;

        case TableSegmentType_Encounter:
            TEncounter TEncounters[ Size / sizeof( TEncounter ) ];
            break;
		
		case TableSegmentType_EncounterSegment1:
            TEncounterSegment1 Segment1[ Size / sizeof( TEncounterSegment1 ) ];
            break;	
		
		case TableSegmentType_EncounterSegment2:
            byte Data[ Size ];
            break;	
			
		case TableSegmentType_EncounterSegment3:
            TEncounterSegment3 Segment3[ Size / sizeof( TEncounterSegment3 ) ];
            break;	

		case TableSegmentType_EncounterSegment4:
            TEncounterSegment4 Segment4[ Size / sizeof( TEncounterSegment4 ) ];
            break;

        case TableSegmentType_Skill_Elements:
            TSkill_Elements Skill[ Size / sizeof( TSkill_Elements ) ];
            break;

        case TableSegmentType_Skill_ActiveSkillData:
            TSkill_ActiveSkillData Skill[ Size / sizeof( TSkill_ActiveSkillData ) ];
            break;

        case TableSegmentType_Item_Accessories:
            TItem_Accessories Accessories[ Size / sizeof( TItem_Accessories ) ];
            break;

        case TableSegmentType_Item_Armor:
            TItem_Armor Armor[ Size / sizeof( TItem_Armor ) ];
            break;

        case TableSegmentType_Item_Consumables:
            TItem_Consumables Consumables[ Size / sizeof( TItem_Consumables ) ];
            break;

        case TableSegmentType_Item_KeyItems:
            TItem_KeyItems KeyItems[ Size / sizeof( TItem_KeyItems ) ];
            break;

        case TableSegmentType_Item_Materials:
            TItem_Materials Materials[ Size / sizeof( TItem_Materials ) ];
            break;


        case TableSegmentType_Item_MeleeWeapons:
            TItem_MeleeWeapons MeleeWeapons[ Size / sizeof( TItem_MeleeWeapons ) ];
            break;


        case TableSegmentType_Item_Outfits:
            TItem_Outfits Outfits[ Size / sizeof( TItem_Outfits ) ];
            break;


        case TableSegmentType_Item_SkillCards:
            TItem_SkillCards SkillCards[ Size / sizeof( TItem_SkillCards ) ];
            break;


        case TableSegmentType_Item_RangedWeapons:
            TItem_RangedWeapons RangedWeapons[ Size / sizeof( TItem_RangedWeapons ) ];
            break;


        case TableSegmentType_Item_Footer:
            TItem_Footer Footer[ Size / sizeof( TItem_Footer ) ];
            break;


        case TableSegmentType_Unit_EnemyUnitStats:
            TEnemyUnitStats Stats[ Size / sizeof( TEnemyUnitStats ) ];
            break;

        case TableSegmentType_Unit_EnemyElementalAffinities:
            TUnitEnemyElementalAffinities ElementalAffinities[ Size / sizeof( TUnitEnemyElementalAffinities ) ];
            break;

        case TableSegmentType_Unit_PersonaElementalAffinities:
            TUnitPersonaElementalAffinities ElementalAffinities[ Size / sizeof( TUnitPersonaElementalAffinities ) ];
            break;

        case TableSegmentType_Unit_Segment3:
            TUnitSegment3Entry Entries[ Size / sizeof( TUnitSegment3Entry ) ];
            break;

        case TableSegmentType_Unit_VisualIndex:
            TUnitVisualIndex VisualIndices[ Size / sizeof( TUnitVisualIndex ) ];
            break;
			
		case TableSegmentType_Visual_PlayerVisualVariables:
            TVisual_EnemyVisualVariablesA Data[ Size / sizeof( TVisual_EnemyVisualVariablesA ) ];
            break;

        case TableSegmentType_Visual_EnemyVisualVariables:
            TVisual_PlayerVisualVariablesA Data[ Size / sizeof( TVisual_PlayerVisualVariablesA ) ];
            break;

        case TableSegmentType_Visual_PersonaVisualVariables:
            TVisual_PersonaVisualVariablesA Data[ Size / sizeof( TVisual_PersonaVisualVariablesA ) ];
            break;
			
		case TableSegmentType_MSG_ArcanaNames:
            TMSG_ArcanaNames ArcanaNames[ Size / sizeof( TMSG_ArcanaNames ) ];
            break;

        case TableSegmentType_MSG_SkillNames:
            TMSG_SkillNames SkillNames[ Size / sizeof( TMSG_SkillNames ) ];
            break;

        case TableSegmentType_MSG_EnemyNames:
            TMSG_EnemyNames EnemyNames[ Size / sizeof( TMSG_EnemyNames ) ];
            break;

        case TableSegmentType_MSG_PersonaNames:
            TMSG_PersonaNames PersonaNames[ Size / sizeof( TMSG_PersonaNames ) ];
            break;

        default:
            byte Data[ Size ];
    }
    
    FAlign( 16 );
} TTableSegment <read=TableSegmentToString>;

string TableSegmentToString( TTableSegment& segment )
{
    return EnumToString( segment.type );
}

typedef struct( string tableName, u32 endOffset )
{
    local int segmentIndex = 0;
    local TableSegmentType segmentType;

    while ( FTell() < endOffset )
    {
        segmentType = TableSegmentType_Unknown;
        if ( !Stricmp( tableName, "persona" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Persona_Stats; break;
                case 1: segmentType = TableSegmentType_Persona_SkillSets; break;
				case 2: segmentType = TableSegmentType_Persona_PartyMembers; break;
                case 3: segmentType = TableSegmentType_Persona_LevelUpThresholds; break;
				case 4: segmentType = TableSegmentType_Persona_MagicianCard; break;
                case 5: segmentType = TableSegmentType_Persona_Fusion; break;
            }
        }
        else if ( !Stricmp( tableName, "player" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Player_LevelUpThresholds;
            }
        } 
        else if ( !Stricmp( tableName, "elsai" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Elsai_Segment0; break;
                case 1: segmentType = TableSegmentType_Elsai_Segment1; break;
            }
        } 
        else if ( !Stricmp( tableName, "aicalc" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_AICalc_Segment1; break;
                case 1: segmentType = TableSegmentType_AICalc_Segment2; break;
                case 2: segmentType = TableSegmentType_AICalc_Segment3; break;
                case 3: segmentType = TableSegmentType_AICalc_Segment4; break;
                case 4: segmentType = TableSegmentType_AICalc_Segment5; break;
                case 5: segmentType = TableSegmentType_AICalc_Segment6; break;
                case 6: segmentType = TableSegmentType_AICalc_Segment7; break;
				case 7: segmentType = TableSegmentType_AICalc_Segment8; break;
				case 8: segmentType = TableSegmentType_AICalc_Generic_Enemy_AI; break;
				case 9: segmentType = TableSegmentType_AICalc_Player_AI; break;
				case 10: segmentType = TableSegmentType_AICalc_Enemy_AI; break;
            }
        } 
        else if ( !Stricmp( tableName, "encount" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Encounter; break;
				case 1: segmentType = TableSegmentType_EncounterSegment1; break;
				case 2: segmentType = TableSegmentType_EncounterSegment2; break;
				case 3: segmentType = TableSegmentType_EncounterSegment3; break;
				case 4: segmentType = TableSegmentType_EncounterSegment4; break;
            }
        }
        else if ( !Stricmp( tableName, "skill" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Skill_Elements; break;
                case 1: segmentType = TableSegmentType_Skill_ActiveSkillData; break;
            }
        }
        else if ( !Stricmp( tableName, "item" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Item_Accessories; break;
                case 1: segmentType = TableSegmentType_Item_Armor; break;
                case 2: segmentType = TableSegmentType_Item_Consumables; break;
                case 3: segmentType = TableSegmentType_Item_KeyItems; break;
                case 4: segmentType = TableSegmentType_Item_Materials; break;
                case 5: segmentType = TableSegmentType_Item_MeleeWeapons; break;
                case 6: segmentType = TableSegmentType_Item_Outfits; break;
                case 7: segmentType = TableSegmentType_Item_SkillCards; break;
                case 8: segmentType = TableSegmentType_Item_RangedWeapons; break;
                case 9: segmentType = TableSegmentType_Item_Footer; break;
            }
        }
        else if ( !Stricmp( tableName, "unit" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Unit_EnemyUnitStats; break;
                case 1: segmentType = TableSegmentType_Unit_EnemyElementalAffinities; break;
                case 2: segmentType = TableSegmentType_Unit_PersonaElementalAffinities; break;
                case 3: segmentType = TableSegmentType_Unit_Segment3; break;
                case 4: segmentType = TableSegmentType_Unit_VisualIndex; break;
            }
        }
		
		else if ( !Stricmp( tableName, "model" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Visual_PlayerVisualVariables; break;
                case 1: segmentType = TableSegmentType_Visual_EnemyVisualVariables; break;
				case 2: segmentType = TableSegmentType_Visual_PersonaVisualVariables; break;
            }
        }
		
		  else if ( !Stricmp( tableName, "msg" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_MSG_ArcanaNames; break;
                case 1: segmentType = TableSegmentType_MSG_SkillNames; break;
                case 2: segmentType = TableSegmentType_MSG_EnemyNames; break;
                case 3: segmentType = TableSegmentType_MSG_PersonaNames; break;
            }
        }

        Printf( "%s\n", EnumToString( segmentType ) );
        SetBackColor( MyRandom( 0xFFFFFFFF ) );
        TTableSegment Segment( segmentType );

        ++segmentIndex;
    }

} TTable;

typedef struct
{
    LittleEndian();
    char FileName[ 252 ];
    u32 FileSize;

    if ( Stricmp( FileNameGetExtension( FileName ), ".tbl" ) == 0 )
    {
        TTable Table( FileNameGetBase( FileName, false ), FTell() + FileSize ); 
    }
    else
    {
        u8 Data[ FileSize ];
    }

    FAlign( 64 );  
} TFile <read=FileToString>; 

string FileToString( struct TFile& file )
{
    return file.FileName;
}


// Read table
local string filePath = GetFileName();
local string fileName = FileNameGetBase( filePath, false );
local string fileExt = FileNameGetExtension( filePath );

if ( Stricmp( fileExt, ".pac" ) == 0 )
{
    // table.pac
    while ( !FEof() )
    {
        TFile File;
    }
}
else if ( Stricmp( fileExt, ".tbl" ) == 0 )
{
    // tbl file
    TTable Table( fileName, FileSize() );
}